/*Arduino MASTER ( quello che comanda la comunicazione )*/
#include <stdio.h>
#include <stdlib.h>


#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <string.h>

RF24 radio(9, 10);                                           // CE, CSN
                                                           //MISO = 12 -  MOSI = 11 -  SCK = 13
const byte address[][6] = {"00001" , "00002"};              //numero accoppiamento scheda wirless WPASS

//Display
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>
#define i2c_Address 0x3D
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SH1106G display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);



// 'maveric', 126x32px
const unsigned char maveric [512] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x00, 0x02, 0x00, 0x03, 0xc0, 0x07, 0x8f, 0xff, 0xf1, 0xff, 0xf0, 0x3c, 0x03, 0xff, 0xe0, 
	0x0c, 0x00, 0x06, 0x00, 0x43, 0xe0, 0x0f, 0x9f, 0xff, 0xf3, 0xff, 0xfc, 0x3c, 0x07, 0xff, 0xe0, 
	0x0e, 0x00, 0x0e, 0x00, 0xe1, 0xe0, 0x0f, 0x3f, 0xff, 0xf3, 0xff, 0xfe, 0x3c, 0x1f, 0xff, 0xe0, 
	0x0f, 0x00, 0x3e, 0x00, 0xe1, 0xe0, 0x1f, 0x3f, 0xff, 0xf3, 0xff, 0xfe, 0x3c, 0x3f, 0xff, 0xe0, 
	0x0f, 0x80, 0x7e, 0x01, 0xf0, 0xf0, 0x1e, 0x7f, 0xff, 0xf3, 0xff, 0xff, 0x3c, 0x7f, 0xff, 0xc0, 
	0x0f, 0xc0, 0xfe, 0x01, 0xf0, 0xf0, 0x3e, 0x78, 0x00, 0x03, 0xc0, 0x0f, 0x3c, 0x7c, 0x00, 0x00, 
	0x0f, 0xe1, 0xfe, 0x03, 0xf8, 0xf8, 0x3c, 0x78, 0x00, 0x03, 0xc0, 0x0f, 0x3c, 0xf8, 0x00, 0x00, 
	0x0f, 0xf3, 0xfe, 0x03, 0xf8, 0x78, 0x3c, 0x78, 0x00, 0x03, 0xe0, 0x1f, 0x3c, 0xf0, 0x00, 0x00, 
	0x0f, 0xff, 0xfe, 0x03, 0xf8, 0x7c, 0x7c, 0x7f, 0xff, 0x83, 0xff, 0xfe, 0x3c, 0xf0, 0x00, 0x00, 
	0x0f, 0xff, 0xde, 0x07, 0xfc, 0x3c, 0x78, 0x7f, 0xff, 0x83, 0xff, 0xfe, 0x3c, 0xf0, 0x00, 0x00, 
	0x0f, 0x7f, 0x9e, 0x07, 0xbc, 0x3c, 0xf8, 0x7f, 0xff, 0x83, 0xff, 0xfc, 0x3c, 0xf0, 0x00, 0x00, 
	0x0f, 0x1f, 0x1e, 0x0f, 0xbe, 0x1e, 0xf0, 0x7f, 0xff, 0x83, 0xff, 0xf8, 0x3c, 0xf0, 0x00, 0x00, 
	0x0f, 0x0e, 0x1e, 0x0f, 0x1e, 0x1f, 0xf0, 0x78, 0x00, 0x03, 0xe3, 0xf0, 0x3c, 0xf0, 0x00, 0x00, 
	0x0f, 0x04, 0x1e, 0x0f, 0x1e, 0x1f, 0xe0, 0x78, 0x00, 0x03, 0xc1, 0xf0, 0x3c, 0xf0, 0x00, 0x00, 
	0x0f, 0x00, 0x1e, 0x1e, 0x0f, 0x0f, 0xe0, 0x78, 0x00, 0x03, 0xc0, 0xf8, 0x3c, 0xf0, 0x00, 0x00, 
	0x0f, 0x00, 0x1e, 0x1e, 0x0f, 0x8f, 0xe0, 0x78, 0x00, 0x03, 0xc0, 0xf8, 0x3c, 0xf8, 0x00, 0x00, 
	0x0f, 0x00, 0x1e, 0x3e, 0x0f, 0x87, 0xc0, 0x78, 0x00, 0x03, 0xc0, 0x78, 0x3c, 0x7c, 0x00, 0x00, 
	0x0f, 0x00, 0x1e, 0x3c, 0x07, 0x87, 0xc0, 0x78, 0x00, 0x03, 0xc0, 0x7c, 0x3c, 0x7e, 0x00, 0x00, 
	0x0f, 0x00, 0x1e, 0x7c, 0x07, 0xc7, 0x80, 0x7f, 0xff, 0xf3, 0xc0, 0x3c, 0x3c, 0x3f, 0xff, 0xe0, 
	0x0f, 0x00, 0x1e, 0x78, 0x03, 0xc3, 0x80, 0x3f, 0xff, 0xf3, 0xc0, 0x3e, 0x3c, 0x1f, 0xff, 0xe0, 
	0x0f, 0x00, 0x1e, 0x78, 0x03, 0xe3, 0x00, 0x1f, 0xff, 0xf3, 0xc0, 0x1e, 0x3c, 0x0f, 0xff, 0xe0, 
	0x0f, 0x00, 0x1e, 0xf8, 0x01, 0xe1, 0x00, 0x0f, 0xff, 0xf3, 0xc0, 0x1e, 0x3c, 0x07, 0xff, 0xe0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'batteria1', 18x13px
const unsigned char batteria1 [39] PROGMEM = {
	0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x40, 0x01, 0x00, 0x40, 0x01, 0x00, 0x40, 0x01, 0x80, 0x40, 
	0x00, 0x80, 0x40, 0x00, 0x80, 0x40, 0x00, 0x80, 0x40, 0x01, 0x80, 0x40, 0x01, 0x00, 0x40, 0x01, 
	0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00
};

// 'batteria2', 18x13px
const unsigned char batteria2 [39] PROGMEM = {
	0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x20, 0x00, 0x80, 0x20, 0x00, 0x80, 0x60, 0x00, 0x80, 0x40, 
	0x00, 0x80, 0x40, 0x00, 0x80, 0x40, 0x00, 0x80, 0x60, 0x00, 0x80, 0x20, 0x00, 0x80, 0x20, 0x00, 
	0x80, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00
};

// 'gps', 25x25px
const unsigned char gps [100] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 
	0x01, 0xff, 0xc0, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x03, 0xf7, 0xe0, 0x00, 0x03, 0xe3, 0xe0, 0x00, 
	0x03, 0xc1, 0xe0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xe3, 0xe0, 0x00, 0x03, 0xff, 0xe0, 0x00, 
	0x01, 0xff, 0xc0, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x7f, 0x00, 0x00, 
	0x00, 0x3e, 0x00, 0x00, 0x01, 0x9c, 0xc0, 0x00, 0x03, 0x88, 0xe0, 0x00, 0x07, 0x80, 0xf0, 0x00, 
	0x03, 0xc1, 0xe0, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00
};

// 'wifi', 15x15px
const unsigned char wifi [30] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x3f, 0xf8, 0x7f, 0xfc, 0xf0, 0x1e, 0x47, 0xc4, 0x1f, 0xf0, 
	0x1e, 0xf0, 0x08, 0x20, 0x03, 0x80, 0x03, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'wifi_off', 15x15px
const unsigned char wifi_off [30] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x67, 0xc0, 0x37, 0xf8, 0x5b, 0xfc, 0xec, 0x1e, 0x66, 0x8c, 0x0b, 0x60, 
	0x1d, 0xb0, 0x0c, 0xc0, 0x00, 0x60, 0x03, 0xb0, 0x03, 0x80, 0x03, 0x80, 0x00, 0x00
};

// 'drone', 30x30px
const unsigned char drone [120] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x03, 0xc0, 0x1f, 0x80, 0x07, 0xe0, 0x30, 0x40, 0x08, 0x30, 
	0x60, 0x60, 0x18, 0x18, 0x60, 0x20, 0x10, 0x18, 0x62, 0x20, 0x11, 0x18, 0x61, 0x60, 0x1a, 0x18, 
	0x20, 0xc0, 0x0c, 0x10, 0x19, 0xcf, 0xce, 0x60, 0x0f, 0x30, 0x33, 0xc0, 0x00, 0x10, 0x20, 0x00, 
	0x00, 0x10, 0x20, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x10, 0x20, 0x00, 
	0x00, 0x10, 0x20, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x10, 0x20, 0x00, 0x0f, 0x30, 0x33, 0xc0, 
	0x19, 0xcf, 0xce, 0x60, 0x20, 0xc0, 0x0c, 0x10, 0x61, 0x60, 0x1a, 0x18, 0x62, 0x20, 0x11, 0x18, 
	0x60, 0x20, 0x10, 0x18, 0x60, 0x60, 0x18, 0x18, 0x30, 0x40, 0x08, 0x30, 0x1f, 0x80, 0x07, 0xe0, 
	0x0f, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00
};
// 'giroscopio', 30x30px
const unsigned char giroscopio [120] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 
	0x00, 0x04, 0x20, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x08, 0x18, 0x00, 0x00, 0x10, 0x18, 0x00, 
	0x00, 0x10, 0x00, 0x00, 0x00, 0x17, 0xf8, 0x00, 0x03, 0xa0, 0x07, 0x00, 0x06, 0x20, 0x01, 0x80, 
	0x08, 0x20, 0x00, 0x40, 0x10, 0x20, 0x00, 0x20, 0x10, 0x20, 0x00, 0x20, 0x10, 0x20, 0x00, 0x20, 
	0x10, 0x20, 0x00, 0x20, 0x08, 0x20, 0x00, 0x40, 0x06, 0xa0, 0x01, 0x80, 0x01, 0xb0, 0x1e, 0x00, 
	0x00, 0x17, 0xf0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x08, 0x18, 0x00, 
	0x00, 0x0c, 0x10, 0x00, 0x00, 0x06, 0x20, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

int page = 1;





//----------------------------------------------------------------------------------------------------------------------|
//matrice telecomando (da [nano]telecomando a [RP2040]drone)
int Lx = 0; //512 valore neutro 
int Ly = 0; // ""
int Rx = 0; // ""
int Ry = 0; // ""
char matrice_nano_comunicante[4][5] = {{"0000"}, {"0000"}, {"0000"}, {"0000"}};
//matrice drone (da [RP2040]drone a [nano]telecomando)
int batteriaTel = 0;
int batteriaDrone = 0;
double latitudine;
double longitudine;
int altezza;
int velocita;
int Pm1 = 100;
int Pm2 = 100;
int Pm3 = 100;
int Pm4 = 100;
float asseX = 10.0;
float asseY = 10.0;
char matrice_nano_ricevente1[7][4] = {batteriaDrone, altezza, velocita, Pm1, Pm2, Pm3, Pm4};
char matrice_nano_ricevente2[2][6] = {asseX, asseY};
char matrice_nano_ricevente3[2][10] = {latitudine, longitudine};

//----------------------------------------------------------------------------------------------------------------------|
//Variabili interne 
unsigned long UltimaRicezione = 10000;
bool segnale = 1;

unsigned long TempoOK;
unsigned long TempoVibro;
unsigned long Tempo3;

int attesa200 = 200;
int attesa500 = 500;
//----------------------------------------------------------------------------------------------------------------------|

//LIBRERIE E VIARIABILI POTENZIOMETRI.ino (lettura joystick per potenza e comando)--------------------------------------|
//utilizzo le variabili pre dichiarate per leggere i potenziometri
#define JoyLx A0
#define JoyLy A1
#define JoyRx A2
#define JoyRy A3
#define SensBatt A6
#define PulsOK 3
#define PulsPIU 4
#define PulsMENO 2
#define pinVibro 8
bool statoVibro = 0;
bool statoPulsOK = 0;
bool premutoPulsOK = 0;
bool statoPulsPIU = 0;
bool premutoPulsPIU = 0;
bool statoPulsMENO = 0;
bool premutoPulsMENO = 0;


void setup() {
  Serial.begin(115200);

  //Display
  display.begin(i2c_Address, true);                // indirizzo del display I2C
  display.display();

  pinMode(pinVibro, OUTPUT);
  pinMode(PulsOK, INPUT_PULLUP);
  pinMode(PulsPIU, INPUT_PULLUP);
  pinMode(PulsMENO, INPUT_PULLUP);

  //Scritta MAVERIC all'accensione
  display.clearDisplay();
  // put your main code here, to run repeatedly:
  display.drawBitmap(1, 16, maveric, 126, 32, 1);
  //display.setCursor(0,10);
  display.display();

  digitalWrite(pinVibro, 1);  delay(800);
  digitalWrite(pinVibro, 0);  

  //settaggio joistck all'inizio programma
  while(Ly <= 300){Ly = map(analogRead(JoyLy), 53, 1023, 0, 600);  if(Ly < 0) Ly = 0;}
  digitalWrite(pinVibro, 1);  delay(200);
  digitalWrite(pinVibro, 0);  delay(200);
  while(Ly >= 10){Ly = map(analogRead(JoyLy), 53, 1023, 0, 600);  if(Ly < 0) Ly = 0;}
  digitalWrite(pinVibro, 1);  delay(200);
  digitalWrite(pinVibro, 0);  delay(200);
  digitalWrite(pinVibro, 1);  delay(500);
  digitalWrite(pinVibro, 0);

  //radio
  radio.begin();                                            //accendo la ricetrasmittente
  radio.openWritingPipe(address[1]);                        //configuro il numero di accoppiamento "00001" per scrivere
  radio.openReadingPipe(1, address[0]);                     //dichiaro che ci sarà una sola comunicazione e configuro il numero di accoppiamento "00001" per leggere
                                                        //gli accoppiamenti drovranno essere scambiati nell'altro arduino per permettere il giusto accoppiamento fra il writing del primo e il reading del secondo arduino
  radio.setPALevel(RF24_PA_MIN);                            //imposto la potenza della ricetrasmittente al minimo

  

}

void loop() {
  

  ingressi ();
  potenziometri ();
  comunicazione ();
  schermo ();
  
}
